SCHOOL OF ENGINEERING ASSIGNMENT COVER SHEET

Title:
	Assignment 3 (4 hours)

Module:
	EENG3130 Introduction to Programming

Work Setter:
	Robert Horne

Assessment:
	This assignment contributes 12.0% of the module.

Deadline:
	Submission deadline: 12:00 2/12/2024 Week 18
Marked work return date: 06/01/2025 Week 25


Collecting Point:
	On line

Intended Learning Outcomes:
	This assignment contributes to the assessment of the EENG3130 learning outcomes:

Feedback method:
	Feedback will be via: Verbal comments in class. Further feedback will be available on request.



You are reminded of the University rules on Academic Integrity as stated in the student handbook.  Examples of conduct regarded as a breach of these regulations include:

•    Plagiarism: reproducing in any work submitted for assessment or review (for example, examination answers, essays, project reports, dissertations or theses) any material derived from work authored by another, without clearly acknowledging the source
•    Duplication of Material
•    Conspiring with others to reproduce the work of others without proper acknowledgement, including knowingly permitting work to be copied by another student
•    Falsification of data/evidence.


Please note that IET accreditation requires that when coursework contributes 30% or more of a module then credit cannot be obtained if either your coursework or examination scores are more than 10% below the module pass mark.  This is irrespective of your module overall mark.

 
Marking Criteria

This assignment will be marked against a model solution which will be made available with the returned work.   The marks awarded will be consistent with the scores indicated in the assignment sheet.  In general, marks may be lost for work which does not show the full method, include the correct units, or is poorly structured and difficult to follow.   Additionally, in design based questions you should consider the most appropriate unit prefixes and the number of significant figures to use for results.  You could also provide sketches of your final designs, and suggest nearest preferred values for components.    If assumptions are required, you should state them and justify why they are appropriate.    If the work asks you to comment on the final result you should make an appropriate conclusion.


 
Assignment 3 – Part One

Fuel gauges on vehicles show how much fuel is in the tank. They do this by using fractions. For example, when you see 1/4 on the gauge, it means the tank is 25% full. When it shows 1/2, the tank is half full (50%), and when it displays 3/4, the tank is 75% full.

Now, let's create a program in a file called 'fuel.py' that asks the user to input a fraction written as X/Y. Both X and Y are whole numbers. After you enter the fraction, the program will calculate the amount of fuel in the tank as a percentage and round it to the nearest whole number. If there's 1% or less of fuel left in the tank, the program will display 'E' to show that the tank is almost empty. If there's 99% or more of fuel remaining, it will display 'F' to indicate that the tank is almost full.

Your Code must follow this structure.

def main():
    ...


def convert(fraction):
    ...


def gauge(percentage):
    ...


if __name__ == "__main__":
    main()

convert expects a str in X/Y format as input, wherein each of X and Y is an integer, and returns that fraction as a percentage rounded to the nearest int between 0 and 100, inclusive. If X and/or Y is not an integer, or if X is greater than Y, then convert should raise a ValueError. If Y is 0, then convert should raise a ZeroDivisionError.

gauge expects an int and returns a str that is:
	"E" if that int is less than or equal to 1,
	"F" if that int is greater than or equal to 99,
	and "Z%" otherwise, wherein Z is that same int.



You must comment your code! 
Assignment 3 – Part Two 

In a file called test_fuel.py, implement two or more functions that collectively test your implementations of convert and gauge thoroughly, each of whose names should begin with test_ so that you can execute your tests with:

pytest test_fuel.py


Be sure to include 
import fuel or from fuel import convert, gauge

atop test_fuel.py so that you can call convert and gauge in your tests.

Take care to return, not print, an int in convert and a str in gauge. Only main should call print.
Note that you can check with pytest whether a function has raised an exception, per docs.pytest.org/en/latest/how-to/assert.html#assertions-about-expected-exceptions.

To build your code you can use this codespace 




Please submit your python files to Moodle, please do not zip them, only .py files will be accepted. 


CATEGORY AND CRITERIA 	QUALITY INDICATOR 	TOT 
	Fail 
0-39% 	Satisfactory 
40-59% 	Good 
60-69% 	Very Good 
70-100% 	 
Programming Principles (25 Marks) Demonstrated clear understanding of lecture content to create a working python file.  	☐ 	☐ 	☐ 	☐ 	/25 
Comments (10 Marks) Commentary of code functionality 	☐ 	☐ 	☐ 	☐ 	/10 
Test Cases (15 Marks) Functional test cases that test a good range of inputs 	☐ 	☐ 	☐ 	☐ 	/15 
TOTAL 	 	/50 

